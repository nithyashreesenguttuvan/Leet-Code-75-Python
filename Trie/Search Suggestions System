class TrieNode:
    def __init__(self):
        self.children = {}
        self.suggestions = []

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
            if len(node.suggestions) < 3:
                node.suggestions.append(word)

    def get_suggestions(self, prefix):
        node = self.root
        for char in prefix:
            if char not in node.children:
                return []
            node = node.children[char]
        return node.suggestions

class Solution:
    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        trie = Trie()
        # Sort products lexicographically
        products.sort()
        # Insert products into the Trie
        for product in products:
            trie.insert(product)

        result = []
        prefix = ""
        # Get suggestions for each prefix of searchWord
        for char in searchWord:
            prefix += char
            result.append(trie.get_suggestions(prefix))
        
        return result
